% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MGnifyR.R
\name{mgnify_query}
\alias{mgnify_query}
\title{#' Search MGnify database for studies, samples and runs}
\usage{
mgnify_query(client, qtype = "samples", accession = NULL,
  asDataFrame = T, maxhits = 200, ...)
}
\arguments{
\item{qtype}{Type of objects to query. One of \code{studies},\code{samples},\code{runs} or
\code{analyses}}

\item{accession}{Either a single known MGnify accession identifier (of type \code{qtype}), or a list/vector
of accessions to query.}

\item{asDataFrame}{Boolean flag to choose whether to return the results as a data.frame or leave as a nested list. In
most cases, \code{asDataFrame = TRUE} will make the most sense.}

\item{maxhits}{determines the maximum number of results to return. The actual number of results will actually be higher than \code{maxhits},
as clipping only occurs on pagination page boundaries. To disable the limit, set \code{maxhits} < 0}

\item{...}{Remaining parameter key/value pairs may be supplied to filter the returned values. Available options differ
between \code{qtypes}.See discussion above for details.}

\item{mgnify_client}{Client instance}

\item{usecache}{Whether to cache the result - and reuse any existing cache entry instead of issuing a
new callout. In generl the use of caching for queries is discouraged, as new data is being uploaded to MGnify
all the time, which might potentially be missed. However, for some purposes (such as analysis reproducibility)
caching makes sense.}
}
\description{
\code{mgnify_query} is a flexible query function, harnessing the "full" power of the JSONAPI MGnify
search filters. Search results may be filtered by metadata value, associated study/sample/analyese etc. Details
of the capabilities may be found [here](https://emg-docs.readthedocs.io/en/latest/api.html#customising-queries). Currently,
the following filters are available (based on examination of the Python source code):
  \itemize{
    \item{\strong{Studies} : accession, biome_name, lineage, centre_name}
     \item{\strong{Samples} : accession, experiment_type, biome_name,
  lineage, geo_loc_name, latitude_gte, latitude_lte,
  longitude_gte, longitude_lte, species, instrument_model, instrument_platform,
   metadata_key, metadata_value_gte, metadata_value_lte, metadata_value,
   environment_material, environment_feature, study_accession}
   \item{\strong{Runs} accession, experiment_type, biome_name, lineage, species,
     instrument_platform, instrument_model}
   }
   Unfortunately (from testing) it appears that some of these filters don't work as expected, so it is important
   to check the results returned match up with what's expected. Even more unfortunately if there's an error in the
   parameter specification, the query will run as if no filter parameters were present at all. Thus the
   result will appear superficially correct but will infact correspond to something completely different. This beahviour
   will hopefully be fixed in future incarnations of the API, but for now users should double check returned
   values.
}
\details{
It is currently not possible to combine queries of the same type in a single call (for example to search for samples
   \emph{between} latitude). However, it is possible to run multiple queries and combine the results using set operations in R to get the
   desired behaviour.
}
\examples{
mg <- mgnify_client(cache_dir="/tmp/mgcache")

#Get a list of studies from the Agricultural Wastewater :
agwaste_studies <- mgnify_query(mg, "studies", biome_name="Agricultural wastewater")

#Get all samples from a particular study
samps <- mgnify_query(mg, "samples", study_accession="MGYS00004521")

#Search for all polar samples
samps_np <- mgnify_query(mg, "samples", latitude_gte=66, maxhits=-1)
samps_sp <- mgnify_query(mg, "samples", latitude_lte=-66, maxhits=-1)
samps_polar <- rbind(samps_np, samps_sp)

}
