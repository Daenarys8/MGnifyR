% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mgnify_download.R
\name{mgnify_download}
\alias{mgnify_download}
\title{Download arbitray files from MGnify, including processed reads and identified protein sequences.}
\usage{
mgnify_download(
  client,
  url,
  target_filename = NULL,
  read_func = NULL,
  usecache = TRUE,
  Debug = FALSE
)
}
\arguments{
\item{client}{MGnify client object}

\item{url}{The url of the file we wish to download}

\item{target_filename}{An optional local filename to use for saving the file. If NULL (default), MGNify local cache settings will be used.
If the file is intended to be processed in a seperate program, it may be sensible to provide a meaningful \code{target_filename}, rather than having to hunt
through the cache folders. If \code{target_filename} is NULL \emph{and} \code{usecache} is \code{FALSE}, the \code{read_func} parameter must be supplied or the file
will be downloaded and then deleted.}

\item{read_func}{An optional function name to process the downloaded file and return the results, rather than relying on post processing. The primary use=case for
this parameter is when local disk space is limited and downloaded files can be quickly processed and discarded. The function should take a single parameter,
the downloaded filename, and may return any valid R object.}

\item{usecache}{whether to enable the default MGnifyR caching mechanism. File locations are overridden if \code{target_filename} is supplied.}

\item{Debug}{whether to enable debug output of the HTTP call - only useful for development.}
}
\value{
Either the local filename of the downloaded file, be it either the location in the MGNifyR cache, or target_filename. If \code{read_func} is used, its result
will be returned.
}
\description{
\code{mgnify_download} is a convenient wrapper round generic the url downloading functionality in R, taking care of things like local
caching and authentication. By default, \code{mgnify_download}
}
\examples{
#Make a client object
mg <- mgnify_client(cache_dir="/tmp/mgcache")
#create a vector of accession ids - these happen to be \code{analysis} accessions
accession_vect <- c("MGYA00563876", "MGYA00563877", "MGYA00563878", "MGYA00563879", "MGYA00563880" )
downloads <- mgnify_get_downloads(mg, accession_vect, "analyses")

#Filter to find the urls of 16S encoding sequences
url_list <- downloads[downloads$attributes.description.label == "Contigs encoding SSU rRNA","download_url"]

#Example 1:
#Download the first file
supplied_filename <- mgnify_download(mg, url_list[[1]], target_filename="SSU_file.fasta.gz")


#Example 2:
#Just use local caching
cached_filename <- mgnify_download(mg, url_list[[2]])

#Example 3:
#Using read_func to open the reads with readDNAStringSet from \code{biostrings}. Without retaining on disk
dna_seqs <- mgnify_download(mg, url_list[[3]], read_func <- readDNAStringSet, usecache=F)

}
